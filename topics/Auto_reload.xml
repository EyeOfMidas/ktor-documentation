<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/stardust/html-entities.dtd">

<topic xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/stardust/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       title="Auto-reload"
       id="Auto_reload">

    <microformat>
        <var name="example_name" value="autoreload"/>
        <include src="lib.md" include-id="download_example"/>
    </microformat>

    <p>
        <a href="running.md">Restarting</a> a server during development might take some time. Ktor allows you to overcome this limitation by using the <emphasis>Auto-reload</emphasis> feature, which reloads application classes on code changes and provides a fast feedback loop.
    </p>

    <chapter title="Enable Auto-reload" id="enable">
        <p>
            To use the Auto-reload feature, you need to enable the
            <a href="development_mode.xml" anchor="enable">development mode</a> first.
        </p>
        <list>
            <li>
                <p>
                    If you use <code>EngineMain</code> to run a server, enable development mode
                    in the <a href="development_mode.xml" anchor="application-conf">application.conf</a> file.
                </p>
            </li>
            <li>
                <p>
                    If you run a server using <code>embeddedServer</code>, you can use the
                    <a href="development_mode.xml" anchor="system-property">io.ktor.development</a>
                    system property.
                </p>
            </li>
        </list>
        <p>
            When development mode is enabled, Ktor will be watching output files from the working directory automatically.
            If required, you can narrow down a set of watched folders by specifying
            <a anchor="watch-paths">watch paths</a>.
        </p>
    </chapter>


    <chapter title="Watch specific paths" id="watch-paths">
        <p>
            When you <a anchor="enable">enable</a> development mode,
            Ktor starts watching output files from the working directory.
            For example, for a <path>ktor-sample</path> project build with Gradle the following folders
            will be watched:
        </p>
        <code style="block">
            ktor-sample/build/classes/kotlin/main/META-INF
            ktor-sample/build/classes/kotlin/main/com/example
            ktor-sample/build/classes/kotlin/main/com
            ktor-sample/build/classes/kotlin/main
            ktor-sample/build/resources/main
        </code>
        <p>
            Watch paths allow you to narrow down a set of watched folders.
            To do this, you can specify a part of a watched path.
            For example, to monitor changes in the <path>ktor-sample/build/classes</path> subfolders,
            pass <code>classes</code> as a watch path.
            Depending on the way you use to run a server, you can specify a watch path in the following ways:
        </p>
        <list>
            <li>
                <p>
                    In the <path>application.conf</path>, specify the <code>watch</code> option:
                </p>
                <code style="block">
                    ktor {
                        deployment {
                            watch = [ classes ]
                        }
                    }
                </code>
                <p>
                    You can specify several watch paths separated by a comma, for example:
                </p>
                <code style="block">
                    watch = [ classes, resources ]
                </code>
            </li>
            <li>
                <p>
                    If you are using <code>embeddedServer</code>, use the <code>watchPaths</code> parameter:
                </p>
                <code style="block" lang="Kotlin">
                    embeddedServer(
                        Netty,
                        // ...
                        watchPaths = listOf("classes")
                    ).start(wait = true)
                </code>
            </li>
        </list>
    </chapter>

    <chapter title="Recompile on changes" id="recompile">
        <p>
            Since the Auto-reload feature detects changes in output files,
            you need to rebuild a project.
            You can do this manually in IntelliJ IDEA or
            enable continuous build execution in Gradle using the <code>-t</code> command-line option.
        </p>
        <list>
            <li>
                <p>
                    To rebuild a project manually in IntelliJ IDEA, select
                    <menupath>Build | Rebuild Project</menupath> from the main menu.
                </p>
            </li>
            <li>
                <p>
                    To rebuild a project automatically using Gradle,
                    you can run the <code>build</code> task with the <code>-t</code> option in a terminal:
                </p>
                <code style="block">
                    ./gradlew -t build
                </code>
                <p>
                    In IntelliJ IDEA, you can create a dedicated
                    <a href="https://www.jetbrains.com/help/idea/work-with-gradle-tasks.html#gradle_run_config">run configuration</a> for monitoring changes and pass <code>-t</code> to <control>Arguments</control>.
                </p>
            </li>
        </list>
    </chapter>

</topic>